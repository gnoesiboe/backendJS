"use strict";

/**
 * @param {Function} Inheritance
 * @returns {Function}
 */
module.exports = function (Inheritance) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @type {Object}
     */
    var FileSystem = require('fs');

    /**
     * @param {String} filePath
     *
     * @constructor
     */
    var Template = function (filePath) {

        /**
         * @type {String}
         */
        this._filePath = null;

        Template.prototype._init.apply(this, arguments);
    };

    _.extend(Template.prototype, {

        /**
         * @param {String} filePath
         */
        _init: function (filePath) {
            this._validateFilePath(filePath);
            this._filePath = filePath;
        },

        /**
         * @param {String} filePath
         * @throws {Error}
         */
        _validateFilePath: function (filePath) {
            if (_.isString(filePath) === false) {
                throw new Error('FilePath should be of type String');
            }
        },

        /**
         * @param {Object} data
         * @throws {Error}
         */
        _validateData: function (data) {
            if (_.isObject(data) === false) {
                throw new Error('Data should be of type Object');
            }
        },

        _validateCallback: function (callback) {
            if (_.isFunction(callback) === false) {
                throw new Error('Please provide a valid callback function');
            }
        },

        /**
         * @param {Object} callbackContext
         * @throws {Error}
         */
        _validateCallbackContext: function (callbackContext) {
            if (_.isObject(callbackContext) === false) {
                throw new Error('CallbackContext should be of type Object');
            }
        },

        /**
         * @param {Object} options
         * @throws {Error}
         */
        _validateOptions: function (options) {
            if (_.isObject(options) === false) {
                throw new Error('Options should be of type Object');
            }
        },

        /**
         * @param {Object} data
         * @param {Function} callback
         * @param {Object} callbackContext
         * @param {Object} options
         */
        render: function (data, callback, callbackContext, options) {
            data = data || {};
            this._validateData(data);
            this._validateCallback(callback);
            callbackContext = callbackContext || this;
            this._validateCallbackContext(callbackContext);
            options = options || {};
            this._validateOptions(options);

            options = _.extend({
                encoding: 'utf8'
            }, options);

            FileSystem.readFile(this._filePath, options, function (err, html) {
                if (err) {
                    throw err;
                }

                callback.call(callbackContext || this, _.template(html, data));
            });
        }
    });

    Template.extend = (new Inheritance).extend;

    return Template;
};