"use strict";

module.exports = function() {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @type {Function}
     */
    var Inheritance = require('gn/inheritance')();

    /**
     * @type {Function}
     */
    var Service = require('gn/service')(Inheritance);


    /**
     * @param {Object} data
     * @constructor
     */
    var ServiceContainer = function(data) {

        /**
         * @type {Object}
         */
        this._data = {};

        ServiceContainer.prototype._init.apply(this, arguments);
    };

    _.extend(ServiceContainer.prototype, {

        /**
         * @param {Object} data
         * @private
         */
        _init: function(data) {
            this._configure();
            this.setData(data || {});
        },

        /**
         * Configures this ServiceContainer
         */
        _configure: function() {
            this.set('underscore', new Service('underscore/underscore'));
            this.set('app.Inheritance', new Service('gn/inheritance'));
            this.set('app.Service', new Service('gn/service', [ 'app.Inheritance' ]));
            this.set('app.Callback', new Service('gn/Callback', [ 'app.Inheritance' ]));
            this.set('app.Observer', new Service('gn/observer', [ 'app.Inheritance', 'app.Logger', 'app.Callback' ]));
        },

        /**
         * @param {Object} data
         */
        setData: function(data) {
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    this.set(key, data[key]);
                }
            }
        },

        /**
         * @param {Object} params
         * @throws {Error}
         */
        _validateParams: function(params) {
            if (_.isObject(params) === false) {
                throw new Error('Params should be of type Object');
            }
        },

        /**
         * @param {String} key
         * @returns {*}
         */
        instance: function(key) {
            this._validateHasKey(key);

            var service = this._data[key];

            if (service.hasInstance() === true) {
                return service.getInstance();
            }

            var args = service.getArguments(),
                Module = this.get(key),
                instance = null;

            if (_.isFunction(Module) === true) {

                // when a module is of type function it is considered a constructor
                // that we need to instantiate
                instance = this._instantiateConstructor(Module, args);
            }
            else {

                // string or object or whatever. No need to instantiate
                instance = Module;
            }

            service.setInstance(instance);

            return instance;
        },

        /**
         * @param {String} key
         * @returns {*}
         */
        get: function(key) {
            this._validateHasKey(key);

            var service = this._data[key],
                module = require(service.getPath());

            if (_.isFunction(module) === true) {
                var dependencies = this._gatherDependencies(service.getDependencies());

                if (service.doAddContainer() === true) {
                    dependencies.push(this);
                }

                return module.apply(module, dependencies);
            }
            else {
                // not a function, so no variables can be send
                return module;
            }
        },

        /**
         * @param {Array} list
         * @returns {Array}
         */
        _gatherDependencies: function(list) {
            var dependencies = [];

            for (var i = 0, l = list.length; i < l; i++) {
                var dependency = this.get(list[i]);
                dependencies.push(dependency);
            }

            return dependencies;
        },

        /**
         * @param {Array} Constructor
         * @param {Object} args
         */
        _instantiateConstructor: function(Constructor, args) {
            // prepent an empty item as the first item in the array is seen as the context for bind
            var FactoryFunction = Constructor.bind.apply(Constructor, [ null ].concat(args));
            return new FactoryFunction();
        },

        /**
         * @param {String} key
         * @returns {boolean}
         */
        has: function(key) {
            this._validateKey(key);
            return this._data.hasOwnProperty(key);
        },

        /**
         * @param {String} key
         * @param {Service} service
         *
         * @return {ServiceContainer}
         */
        set: function(key, service) {
            this._validateKey(key);
            this._validateService(service);

            this._data[key] = service;

            return this;
        },

        /**
         * @param {String} key
         */
        _validateHasKey: function(key) {
            if (this.has(key) === false) {
                throw new Error('No item with key: ' + key + ' found in service container');
            }
        },

        /**
         * @param {String} key
         */
        _validateKey: function(key) {
            if (_.isString(key) === false) {
                throw new Error('ServiceContainer key should be of type String');
            }
        },

        /**
         *  @param {Object} service
         */
        _validateService: function(service) {
            /*if ((service instanceof Service) === false) {*/
            if (_.isObject(service) === false) {
                throw new Error('ServiceContainer item should be of an instance of Service');
            }
        },

        /**
         * @param {Function} target
         * @return {Array}
         */
        _parseFunctionArguments: function(target) {
            var stripCommentsRegex = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,
                parseArgumentsRegex = /^function\s*[^\(]*\(\s*([^\)]*)\)/m,
                toArrayRegex = /,\s*/m;

            var argsString = target.toString().replace(stripCommentsRegex, '').match(parseArgumentsRegex)[1];

            if (argsString.length === 0) {
                return [];
            }

            return argsString.split(toArrayRegex);
        }
    });

    ServiceContainer.extend = (new Inheritance).extend;

    return ServiceContainer;
};