"use strict";

/**
 * @param {Function} Inheritance
 * @returns {Function}
 */
module.exports = function(Inheritance) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * Logger
     *
     * @param {String} prefix
     *
     * @constructor
     */
    var Logger = function(prefix) {

        /**
         * @type {string}
         */
        this._prefix = '';

        Logger.prototype._init.apply(this, arguments);
    };

    _.extend(Logger.prototype, {

        /**
         * @type {Array}
         */
        _supportedTypes: [
            'error',
            'debug',
            'info',
            'log'
        ],

        /**
         * Executes actions to intiate this instance
         */
        _init: function(prefix) {
            prefix = prefix || '';

            this._validatePrefix(prefix);
            this._prefix = prefix + ': ';
        },

        /**
         * @param {String} prefix
         */
        _validatePrefix: function(prefix) {
            if (_.isString(prefix) === false) {
                throw new Error('Prefix should be of type String');
            }
        },

        /**
         * @param {String} message
         */
        _validateMessage: function(message) {
            if (_.isString(message) === false) {
                throw new Error('Message should be of type String');
            }
        },

        /**
         * @param {String} type
         * @throws {Error}
         */
        _validateType: function(type) {
            if (_.isString(type) === false) {
                throw new Error('Type should be of type String');
            }

            if (this._supportedTypes.indexOf(type) === -1) {
                throw new Error('Type ' + type + ' not supported');
            }
        },

        /**
         * @param {String} message
         * @param {String} type
         */
        _log: function(message, type) {
            this._validateMessage(message);
            this._validateType(type);

            console[type](message);
        },

        /**
         * @param {String} message
         */
        logError: function(message) {
            this._log('error - ' + this._prefix + message, 'error');
        },

        /**
         * @param {String} message
         */
        logLog: function(message) {
            this._log('log - ' + this._prefix + message, 'log');
        },

        /**
         * @param {String} message
         */
        logWarn: function(message) {
            this._log('warn - ' + this._prefix + message, 'warn');
        },

        /**
         * @param {String} message
         */
        logInfo: function(message) {
            this._log('info - ' + this._prefix + message, 'info');
        }
    });

    Logger.extend = (new Inheritance).extend;

    return Logger;
};