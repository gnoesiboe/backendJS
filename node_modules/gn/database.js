/**
 * @param {Function} Inheritance
 * @param {Function} Logger
 * @param {Function} Observer
 *
 * @returns {Function}
 */
module.exports = function(Inheritance, Logger, Observer) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @type {Object}
     */
    var mysql = require('mysql');

    /**
     * @param {String} host
     * @param {String} username
     * @param {String} password
     * @param {String} databaseName
     */
    var Database = function(host, username, password, databaseName) {

        /**
         * @type {Object}
         */
        this._reference = null;

        /**
         * @type {Object}
         */
        this._connection = null;

        /**
         * @type {Object}
         */
        this._logger = null;

        Database.prototype._init.apply(this, arguments);
    };

    _.extend(Database.prototype, new Observer(), {

        /**
         * @param {String} host
         * @param {String} username
         * @param {String} password
         * @param {String} databaseName
         */
        _init: function (host, username, password, databaseName) {
            this._logger = new Logger('[database]');
            this._initEvents();

            this._initReference(host, username, password, databaseName);
        },

        /**
         * Initiates the events of this database object
         */
        _initEvents: function() {
            var events = [
                'connected',
                'query_executed',
                'disconnected'
            ];

            this._addEvents(events);
        },

        /**
         * @param {String} host
         * @param {String} username
         * @param {String} password
         * @param {String} databaseName
         */
        _initReference: function(host, username, password, databaseName) {
            this._validateHost(host);
            this._validateUsername(username);
            this._validatePassword(password);
            this._validateDatabaseName(databaseName);

            this._reference = mysql.createConnection({
                host: host,
                user: username,
                password: password,
                database: databaseName
            });
        },

        /**
         * @param {Function} callback
         * @param {Object} callbackContext
         */
        connect: function(callback, callbackContext) {
            var self = this;

            this._reference.connect(function(err, connection) {
                if (err) {
                    throw err;
                }

                self._logger.logInfo('Database connected..');
                self._trigger('connected', { connection: connection });

                self._connection = connection;

                callback.call(callbackContext || self);
            });
        },

        /**
         * @param {String} q
         * @param {Function} callback
         * @param {Object} callbackContext
         */
        query: function(q, callback, callbackContext) {
            var self = this;

            var onConnectionAvailable = function() {
                self._reference.query(q, function(err, data) {
                    if (err) {
                        throw err;
                    }

                    self._logger.logInfo(q);
                    self._trigger('query_executed', { data: data });

                    callback.call(callbackContext || self, data);
                });
            };

            if (this.hasConnection() === false) {
                this._logger.logInfo('Create connection to execute query..');

                this.connect(function() {
                    onConnectionAvailable();
                }, this);
            } else {
                onConnectionAvailable();
            }
        },

        /**
         * @returns {Boolean}
         */
        hasConnection: function() {
            return _.isObject(this._connection);
        },

        /**
         * @param {Function} callback
         * @param {Object} callbackContext
         */
        disconnect: function (callback, callbackContext) {
            this._logger.logInfo('Attempt close connection..');

            if (this.hasConnection() === false) {
                this._logger.logInfo('Attempt failed. No connection to close..');

                return;
            }

            var self = this;

            this._reference.end(function (err) {
                if (err) {
                    throw err;
                }

                self._logger.logInfo('Attempt successful. Connection closed..');
                self._trigger('disconnected', {});

                self._connection = null;

                if (_.isFunction(callback) === true) {
                    callback.call(callbackContext || this);
                }
            });
        },

        /**
         * @param {String} host
         * @throws {Error}
         */
        _validateHost: function(host) {
            if (_.isString(host) === false) {
                throw new Error('Host should be of type String');
            }
        },

        /**
         * @param {String} databaseName
         * @throws {Error}
         */
        _validateDatabaseName: function(databaseName) {
            if (_.isString(databaseName) === false) {
                throw new Error('DatabaseName should be of type String');
            }
        },

        /**
         * @param {String} password
         * @throws {Error}
         */
        _validatePassword: function(password) {
            if (_.isString(password) === false) {
                throw new Error('Password should be of type String');
            }
        },

        /**
         * @param {String} username
         * @throws {Error}
         */
        _validateUsername: function(username) {
            if (_.isString(username) === false) {
                throw new Error('Username should be of type String');
            }
        }
    });

    Database.extend = (new Inheritance).extend;

    return Database;
};