"use strict";

/**
 * @param {Function} Inheritance
 * @param {Function} Logger
 *
 * @returns {Function}
 */
module.exports = function (Inheritance, Logger) {

    // validate Inheritance dependency
    if (typeof Inheritance === 'undefined') {
        throw new Error('The Inheritance module is required for the Router module to work');
    }

    // validate logger dependency
    if (typeof Logger === 'undefined') {
        throw new Error('The Logger module is required for the Router module to work');
    }
    var LoggerInterface = require('gn/loggerInterface')(Inheritance);
    (new LoggerInterface).validate(new Logger(''));

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @param {Object} routes
     *
     * @constructor
     */
    var Router = function (routes) {

        /**
         * @type {Object}
         */
        this._routes = {};

        /**
         * @type {Object}
         */
        this._currentRoute = null;

        /**
         * @type {Object}
         */
        this._logger = null;

        Router.prototype._init.apply(this, arguments);
    };

    _.extend(Router.prototype, {

        /**
         * @param {Object} routes
         * @protected
         */
        _init: function (routes) {
            this._logger = new Logger('[router]');
            this.setRoutes(routes || {});
            this._configure();
        },

        /**
         * Configures this router
         *
         * @protected
         */
        _configure: function () {
            // implement to add routes
        },

        /**
         * @param {Object} routes
         */
        setRoutes: function (routes) {
            for (var key in routes) {
                if (routes.hasOwnProperty(key)) {
                    this.setRoute(key, routes[key]);
                }
            }
        },

        /**
         * @param {String} key
         * @param {Object} route
         */
        setRoute: function (key, route) {
            this._validateRoute(key, route);

            this._routes[key] = route;
        },

        /**
         * @param {String} key
         * @param {Object} route
         */
        _validateRoute: function (key, route) {
            if (_.isObject(route) === false) {
                throw new Error('Route with key: ' + key + ' is not a valid route object');
            }

            var RouteInterface = require('gn/routeInterface')(Inheritance);
            (new RouteInterface).validate(route);
        },

        /**
         * @returns {Object}
         */
        getCurrentRoute: function () {
            return this._currentRoute;
        },

        /**
         * @param {Object} request
         */
        match: function (request) {
            this._logger.logInfo('matching request url: ' + request.url);

            for (var key in this._routes) {
                if (this._routes.hasOwnProperty(key)) {
                    var route = this._routes[key];

                    if (route.match(request) === true) {
                        this._currentRoute = route;

                        return true;
                    }
                }
            }

            this._logger.logInfo('no route matched url: ' + request.url);

            return false;
        }
    });

    Router.extend = (new Inheritance()).extend;

    return Router;
};