/**
 * @param {Object} Inheritance
 * @returns {Function}
 */
module.exports = function(Inheritance) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @param {Function} callback
     * @param {Object} context
     *
     * @constructor
     */
    var Callback = function(callback, context) {

        /**
         * @type {Function}
         */
        this._callback = null;

        /**
         * @type {Object}
         */
        this._context = null;

        Callback.prototype._init.apply(this, arguments);
    };

    _.extend(Callback.prototype, {

        /**
         * @param {Function} callback
         * @param {Object} callbackContext
         */
        _init: function(callback, callbackContext) {
            this._validateCallback(callback);
            callbackContext = callbackContext || this;
            this._validateCallbackContext(callbackContext);

            this._callback = callback;
            this._context = callbackContext;
        },

        /**
         * @returns {Function}
         */
        getCallback: function() {
            return this._callback;
        },

        /**
         * @returns {Object}
         */
        getContext: function() {
            return this._context;
        },

        /**
         * @param {Function} callback
         * @returns {boolean}
         */
        hasCallback: function(callback) {
            return this._callback === callback;
        },

        /**
         *
         * @param {Object} context
         * @returns {boolean}
         */
        hasContext: function(context) {
            return this._context === context;
        },

        /**
         * @param {Object} callbackContext
         * @throws {Error}
         */
        _validateCallbackContext: function(callbackContext) {
            if (_.isObject(callbackContext) === false) {
                throw new Error('CallbackContext should be of type Object');
            }
        },

        /**
         * @param {Function} callback
         */
        _validateCallback: function (callback) {
            if (_.isFunction(callback) === false) {
                throw new Error('Please provide a valid callback function');
            }
        },
    });

    Callback.extend = (new Inheritance).extend;

    return Callback;
};