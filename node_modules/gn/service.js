"use strict";

/**
 * @param {Function} Inheritance
 * @returns {Function}
 */
module.exports = function(Inheritance) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @param {Function} path
     * @param {Object} dependencies
     * @param {Array} args
     * @param {Boolean} addContainer        Add container to module dependencies
     *
     * @constructor
     */
    var Service = function(path, dependencies, args, addContainer) {

        /**
         * @type {String}
         */
        this._path = null;

        /**
         * @type {Array}
         */
        this._dependencies = null;

        /**
         * @type {Array}
         */
        this._arguments = null;

        /**
         * @type {*}
         */
        this._instance = null;

        /**
         * @type {Boolean}
         */
        this._addContainer = null;

        Service.prototype._init.apply(this, arguments);
    };

    _.extend(Service.prototype, {

        /**
         * @param {Function} path
         * @param {Object} dependencies
         * @param {Array} args
         * @param {Boolean} addContainer
         */
        _init: function(path, dependencies, args, addContainer) {
            this._validatePath(path);
            this._path = path;

            dependencies = dependencies || [];
            this._validateDependencies(dependencies);
            this._dependencies = dependencies;

            args = args || [];
            this._validateArguments(args);
            this._arguments = args;

            addContainer = addContainer || false;
            this._validateAddContainer(addContainer);
            this._addContainer = addContainer;
        },

        /**
         * @returns {Boolean}
         */
        doAddContainer: function() {
            return this._addContainer;
        },

        /**
         * @param {Boolean} addContainer
         * @throws {Error}
         */
        _validateAddContainer: function(addContainer) {
            if (_.isBoolean(addContainer) === false) {
                throw new Error('AddContainer value should be of type Boolean');
            }
        },

        /**
         *
         * @param {Array} args
         * @throws {Error}
         */
        _validateArguments: function(args) {
            if (_.isArray(args) === false) {
                throw new Error('Arguments is to be of type Array');
            }
        },

        /**
         * @returns {Array}
         */
        getArguments: function() {
            return this._arguments;
        },

        /**
         * @param {String} path
         * @throws {Error}
         */
        _validatePath: function(path) {
            if (_.isString(path) === false) {
                throw new Error('Path should be of type String');
            }
        },

        /**
         * @param {Array} dependencies
         * @throws {Error}
         */
        _validateDependencies: function(dependencies) {
          if (_.isArray(dependencies) === false) {
                throw new Error('Dependencies should be of type Array');
            }
        },

        /**
         * @returns {Function|Object}
         */
        getPath: function() {
            return this._path;
        },

        /**
         * @param {*} instance
         */
        setInstance: function(instance) {
            this._instance = instance;
        },

        /**
         * @returns {boolean}
         */
        hasInstance: function() {
            return _.isNull(this._instance) === false;
        },

        /**
         * @returns {*}
         */
        getInstance: function() {
            return this._instance;
        },

        /**
         * @returns {Array}
         */
        getDependencies: function() {
            return this._dependencies;
        }
    });

    Service.extend = (new Inheritance).extend;

    return Service;
};