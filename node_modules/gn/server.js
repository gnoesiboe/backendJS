"use strict";

/**
 * @param {Function} Inheritance
 * @param {Function} Logger
 */
module.exports = function (Inheritance, Logger) {

    // validate Inheritance dependency
    if (typeof Inheritance === 'undefined') {
        throw new Error('The Inheritance module is required for the Router module to work');
    }

    // validate logger dependency
    if (typeof Logger === 'undefined') {
        throw new Error('The Logger module is required for the Router module to work');
    }
    var LoggerInterface = require('gn/loggerInterface')(Inheritance);
    (new LoggerInterface).validate(new Logger(''));

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @constructor
     *
     * @param {Number} port
     */
    var Server = function (port) {

        /**
         * @type {Object}
         * @private
         */
        this._port = null;

        /**
         * @type {Object}
         */
        this._logger = null;

        Server.prototype._init.apply(this, arguments);
    };

    _.extend(Server.prototype, {

        /**
         * @param {Number} port
         * @protected
         */
        _init: function (port) {
            this._validatePort(port);
            this._port = port;

            this._logger = new Logger('[server]');
        },

        /**
         * @param {Number} port
         * @throws {Error}
         */
        _validatePort: function(port) {
            if (_.isNumber(port) === false) {
                throw new Error('Port should be of type Number');
            }
        },

        /**
         * @param {Function} callback
         * @return {Server}
         */
        start: function (callback) {
            require('http').createServer(callback)
                           .listen(this._port);

            this._logger.logInfo('Listening on port: ' + this._port);

            return this;
        }
    });

    Server.extend = (new Inheritance).extend;

    return Server;
};