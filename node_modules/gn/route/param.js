"use strict";

/**
 * @param {Function} BaseRoute
 * @returns {Function}
 */
module.exports = function (BaseRoute) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    return BaseRoute.extend({

        /**
         * @type {RegExp}
         * @protected
         */
        _paramRegex: /(:[^/]+)/g,

        /**
         * @param {String} path
         * @returns {boolean}
         *
         * @protected
         */
        _matchPath: function (path) {
            var pattern = this._path,
                params = this._parseParamsFromPattern(pattern);

            if (_.isArray(params) === false) {
                return false;
            }

            pattern = this._replaceIdentifiersForRegex(pattern);

            var matches = path.match(pattern),
                values = {};

            if (_.isArray(matches) === false) {
                return false;
            }

            for (var i = 0, l = params.length; i < l; i++) {
                var param = params[i],
                    match = matches[i + 1];

                if (typeof match !== 'undefined') {
                    values[this._prepareParam(param)] = match;
                }
            }

            this._params = values;

            return true;
        },

        /**
         * Replaces the ':<id>' identifiers with regexes.
         *
         * @param {String} pattern
         * @returns {String}
         *
         * @protected
         */
        _replaceIdentifiersForRegex: function (pattern) {
            return pattern.replace(this._paramRegex, '([^/]+)');
        },

        /**
         * @param {String} param
         * @returns {String}
         *
         * @protected
         */
        _prepareParam: function (param) {
            return param.replace(':', '');
        },

        /**
         * @param {String} pattern
         * @returns {Array}
         *
         * @protected
         */
        _parseParamsFromPattern: function (pattern) {
            return pattern.match(this._paramRegex);
        }
    });
};