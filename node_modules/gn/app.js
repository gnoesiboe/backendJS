"use strict";

/**
 * @param {Function} Inheritance
 * @param {Function} Router
 * @param {Function} Logger
 * @param {Function} NotFoundController
 *
 * @returns {Function}
 */
module.exports = function(Inheritance, Router, Logger, NotFoundController) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    // validate inheritance dependency
    if (typeof Inheritance === 'undefined') {
        throw new Error('App module requires the Inheritance module to work');
    }

    // validate router dependency
    var RouterInterface = require('gn/routerInterface')(Inheritance);
    (new RouterInterface).validate(new Router({}));

    // validate logger dependency
    var LoggerInterface = require('gn/loggerInterface')(Inheritance);
    (new LoggerInterface).validate(new Logger(''));

    // validate not found controller dependency
    var ControllerInterface = require('gn/controllerInterface')(Inheritance);
    (new ControllerInterface).validate(new NotFoundController);

    /**
     * @constructor
     */
    var App = function() {

        /**
         * @type {Object}
         */
        this._logger = null;

        App.prototype._init.apply(this, arguments);
    };

    _.extend(App.prototype, {

        /**
         * Initiates this object
         */
        _init: function() {
            this._logger = new Logger('[app]');
        },

        /**
         * @param {Object} request
         * @param {Object} response
         *
         * @todo validate request and response input
         */
        handle: function(request, response) {
            var myRouter = new Router(),
                hasMatch = myRouter.match(request);

            if (hasMatch !== true) {
                this._logger.logInfo('no route match, execute 404 response..');

                var myNotFoundController = new NotFoundController();
                myNotFoundController.handle(request, response, myRouter);

                return;
            }

            this._logger.logInfo('handle router match..');

            var currentRoute = myRouter.getCurrentRoute(),
                Controller = currentRoute.getController(),
                myController = new Controller();

            myController.handle(request, response, myRouter);
        }
    });

    App.extend = (new Inheritance).extend;

    return App;
};