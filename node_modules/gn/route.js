"use strict";

/**
 * @param {Function} Inheritance
 * @returns {Function}
 */
module.exports = function (Inheritance) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @param {String} path
     * @param {Array} methods
     * @param {Function} controller
     * @param {String} host
     *
     * @constructor
     */
    var Route = function (path, methods, controller, host) {

        /**
         * @type {Object}
         */
        this._params = {};

        /**
         * @type {String}
         */
        this._host = null;

        /**
         * @type {String}
         */
        this._path = null;

        /**
         * @type {Function}
         */
        this._controller = null;

        /**
         * @type {Array}
         */
        this._methods = null;

        Route.prototype._init.apply(this, arguments);
    };

    _.extend(Route.prototype, {

        /**
         * Intiates this router
         */
        _init: function (path, methods, controller, host) {
            this._validatePath(path);
            this._path = path;

            this._validateMethods(methods);
            this._methods = methods;

            this._validateController(controller);
            this._controller = controller;

            this._validateHost(host);
            this._host = host;
        },

        /**
         * @param {String} host
         * @throws {Error}
         */
        _validateHost: function(host) {
            if (_.isNull(host) === false && _.isString(host) === false) {
                throw new Error('Host should either be of type String or null');
            }
        },

        /**
         * @param {String} path
         * @throws {Error}
         */
        _validatePath: function(path) {
            if (_.isString(path) === false) {
                throw new Error('Path should be of type String');
            }
        },

        /**
         * @param {String} methods
         * @throws {Error}
         */
        _validateMethods: function(methods) {
            if (_.isArray(methods) === false) {
                throw new Error('Method should be of type Array');
            }
        },

        /**
         * @param {Function} controller
         * @throws {Error}
         */
        _validateController: function(controller) {
            if (_.isFunction(controller) === false) {
                throw new Error('Controller should be of type Function');
            }

            var ControllerInterface = require('gn/controllerInterface')(Inheritance);
            (new ControllerInterface).validate(new controller);
        },

        /**
         * @returns {Object}
         */
        getParams: function() {
            return this._params;
        },

        /**
         * @param {String} key
         * @returns {String}
         */
        getParam: function(key) {
            this._validateHasParam(key);
            return this._params[key];
        },

        /**
         * @param {String} key
         * @returns {boolean}
         */
        hasParam: function(key) {
            return this._params.hasOwnProperty(key);
        },

        /**
         * @param {String} key
         * @throws {Error}
         */
        _validateHasParam: function(key) {
            if (this.hasParam(key) === false) {
                throw new Error('Route has no param with key: ' + key);
            }
        },

        /**
         * @param {String} path
         * @returns {Boolean}
         */
        _matchPath: function(path) {
            // implemented in different route types

            return false;
        },

        /**
         * @param {String} method
         * @returns {Boolean}
         */
        _matchMethod: function (method) {
            method = method.toUpperCase();

            for (var i = 0, l = this._methods.length; i < l; i++) {
                if (this._methods.indexOf(method) !== -1) {
                    return true;
                }
            }

            return false;
        },

        /**
         * @param {String} host
         * @returns {Boolean}
         */
        _matchHost: function (host) {
            return _.isNull(this._host) === true || this._host === host;
        },

        /**
         * @returns {Function}
         */
        getController: function () {
            return this._controller;
        },

        /**
         * @param {Object} request
         * @returns {Boolean}
         */
        match: function (request) {
            return  this._matchHost(request.headers.host) &&
                    this._matchMethod(request.method) &&
                    this._matchPath(request.url);
        }
    });

    Route.extend = (new Inheritance()).extend;

    return Route;
};