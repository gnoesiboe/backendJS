"use strict";

/**
 * Simple constructor that can be used to validate if an object
 * implements specific properties/methods
 *
 * @param {Function} Inheritance
 * @returns {Function}
 */
module.exports = function(Inheritance) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    if (typeof Inheritance === 'undefined') {
        throw new Error('The Interface module requires the Inheritance module to work');
    }

    /**
     * @constructor
     */
    var Interface = function() {

        /**
         * @type {Object}
         */
        this._items = {};

        Interface.prototype._init.apply(this, arguments);
    };

    _.extend(Interface.prototype, {

        /**
         * Defines the supported property types
         * for this interface simulator
         */
        _supportedPropertyTypes: [
            'function',
            'object',
            'string',
            'number',
            'array'
        ],

        /**
         * Initiates this interface
         */
        _init: function() {
          this._configure();
        },

        /**
         * Configures this Interface
         */
        _configure: function() {
            // overwrite to define the interface
        },

        /**
         * @param {String} property
         * @throws {Error}
         */
        _validateProperty: function(property) {
            if (_.isString(property) === false) {
                throw new Error('Property should be supplied as a String');
            }
        },

        /**
         * @param {String} propertyType
         * @throws {Error}
         */
        _validatePropertyType: function(propertyType) {
            if (_.isString(propertyType) === false) {
                throw new Error('Property type should be supplied as a String');
            }

            propertyType = propertyType.toLowerCase();

            if (this._supportedPropertyTypes.indexOf(propertyType) === -1) {
                throw new Error('Property type should be one of: ' + this._supportedPropertyTypes.join(', '));
            }
        },

        /**
         * @param {String} property
         * @param {String} propertyType
         *
         * @returns {Interface}
         */
        _require: function(property, propertyType) {
            this._validateProperty(property);
            this._validatePropertyType(propertyType);

            this._items[property] = propertyType.toLowerCase();

            return this;
        },

        /**
         * @param {Object} object
         * @throws {Error}
         */
        _validateObject: function(object) {
            if (_.isObject(object) === false) {
                throw new Error('Only objects can be validated');
            }
        },

        /**
         * @param object
         */
        validate: function(object) {
            this._validateObject(object);

            for (var requiredProperty in this._items) {
                if (this._items.hasOwnProperty(requiredProperty)) {
                    var requiredPropertyType = this._items[requiredProperty];

                    // check if the object (or any of it's prototypes) has the required property
                    if (typeof object[requiredProperty] === 'undefined') {
                        throw new Error('Interface requires this object to have a property: \'' + requiredProperty + '\' of type: \'' + requiredPropertyType + '\'');
                    }

                    this._validateRequiredPropertyType(requiredProperty, requiredPropertyType, object[requiredProperty]);
                }
            }
        },

        /**
         * @param {String} requiredProperty
         * @param {String} requiredPropertyType
         * @param {*} property
         */
        _validateRequiredPropertyType: function(requiredProperty, requiredPropertyType, property) {
            var requiredPropertyTypeUpper = requiredPropertyType[0].toUpperCase() + requiredPropertyType.substr(1),
                checkMethodName = 'is' + requiredPropertyTypeUpper;

            if (typeof _[checkMethodName] === 'undefined') {
                throw new Error('requiredPropertyType not supported');
            }

            if (_[checkMethodName](property) === false) {
                throw new Error('Interface demands that property: \'' + requiredProperty + '\' should be of type \'' + requiredPropertyTypeUpper + '\'');
            }
        }
    });

    Interface.extend = (new Inheritance).extend;

    return Interface;
};