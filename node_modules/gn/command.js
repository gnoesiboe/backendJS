/**
 * @param {Function} Inheritance
 * @param {Function} Logger
 *
 * @returns {Function}
 */
module.exports = function(Inheritance, Logger) {

    /**
     * @type {Object}
     */
    var _ = require('underscore/underscore');

    /**
     * @param {String} action
     * @param {Object} params
     *
     * @constructor
     */
    var Command = function(action, params) {

        /**
         * @type {String}
         */
        this._action = null;

        /**
         * @type {Object}
         */
        this._params = null;

        /**
         * @type {Object}
         */
        this._logger = null;

        Command.prototype._init.apply(this, arguments);
    };

    _.extend(Command.prototype, {

        /**
         * @param {String} action
         * @param {Object} params
         */
        _init: function(action, params) {
            this._validateAction(action);
            this._action = action;

            this._validateParams(params);
            this._params = params;

            this._logger = new Logger('[command]');
        },

        /**
         * @param {Object} params
         * @throws {Error}
         */
        _validateParams: function(params) {
            if (_.isObject(params) === false) {
                throw new Error('Params should be of type Object');
            }
        },

        /**
         * @param {String} action
         * @throws {Error}
         */
        _validateAction: function(action) {
            if (_.isString(action) === false) {
                throw new Error('Action should be of type string');
            }
        },

        /**
         * @returns {String}
         */
        getAction: function() {
            return this._action;
        },

        /**
         * @returns {Object}
         */
        getParams: function() {
            return this._params;
        },

        /**
         * @returns {Object}
         */
        toObject: function() {
            return {
                action: this.getAction(),
                params: this.getParams()
            }
        },

        /**
         * @returns {String}
         */
        toJSON: function() {
            return JSON.stringify(this.toObject());
        }
    });

    /**
     * @param {String} json
     */
    Command.createFromJSON = function(json) {
        if (_.isString(json) === false) {
            throw new Error('Json should be of type string');
        }

        var object = JSON.parse(json);

        return new Command(object.action, object.params);
    };

    Command.extend = (new Inheritance).extend;

    return Command;
};